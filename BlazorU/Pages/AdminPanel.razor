@page "/admpanel"
@using BlazorU.ApiRequest
@using BlazorU.ApiRequest.Model
@inject HttpClient Http
@* @inject PageVisibilityService PageVisibilityService *@
@using BlazorU.Pages
@inject NavigationManager NavigationManager
@inject IJSRuntime JS







<h3>AdminPanel</h3>

<h1>Список</h1>

<p class="text-center fw-bold mb-5 mx-1 mx-md-4 mt-4">
    <table class="table table-bordered">
        <thead class="alert-dark">
            <tr>
                <th>id_Email</th>
                <th>id_User</th>
                <th>Email</th>
                <th>Name</th>
                <th>Descrioption</th>
                <th>Role</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @if (users == null)
            {
                <tr>
                    <td colspan="3" class="text-center">Loading...</td>
                </tr>
            }
            else if (!users.Any())
            {
                <tr>
                    <td colspan="3" class="text-center">No users found</td>
                </tr>
            }
            else
            {
                @foreach (var user in users)
                {

                    <tr>
                        <td>@user.id_Email</td>
                        <td>@user.id_User</td>
                        <td>@user.Email</td>
                        <td>@user.Name</td>
                        <td>@user.Descrioption</td>
                        <td>@user.Role</td>
                        <td>
                            
                            <button @onclick="() => DeleteUser(user.id_Email)" class="btn btn-danger">Удалить</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</p>

<h1>Добавление</h1>


<div class="d-flex align-items-center h-custom-2 px-5 ms-xl-4 mt-5 pt-5 pt-xl-0 mt-xl-n5">
    <form style="width: 23rem;">
        <div class="form-outline mb-4">
            <label class="form-label" for="form2Example28">Email</label>
            <input type="password" @bind="@reqDataUser.Email" id="form2Example28" class="form-control form-control-lg" />
        </div>
        <div class="form-outline mb-4">
            <label class="form-label" for="form2Example28">Password</label>
            <input type="password" @bind="@reqDataUser.Password" id="form2Example28" class="form-control form-control-lg" />
        </div>
        <div class="form-outline mb-4">
            <label class="form-label" for="form2Example28">Name</label>
            <input type="password" @bind="@reqDataUser.Name" id="form2Example28" class="form-control form-control-lg" />
        </div>
        <div class="form-outline mb-4">
            <label class="form-label" for="form2Example28">Description</label>
            <input type="password" @bind="@reqDataUser.Descrioption" id="form2Example28" class="form-control form-control-lg" />
        </div>
        <div class="pt-1 mb-4">
            <button class="btn btn-info btn-lg btn-block" @onclick="AddNewUser" type="button">Add</button>
        </div>
    </form>
</div>












@code {

    private string message = string.Empty;
    private List<UserDataShort> users;
    private ReqDataUser reqDataUser = new ReqDataUser();
    private UserDataShort newUser = new UserDataShort();

    [Inject] private ApiRequestService ApiRequest { get; set; }





    protected override async Task OnInitializedAsync()
    {
        await getAllUsers();
    }

    private async Task getAllUsers()
    {
        var userData = await ApiRequest.GetAllUsersAsync();
        users = userData?.data?.users ?? new List<UserDataShort>();

        StateHasChanged();
    }


    private async void AddNewUser()
    {
        var reqAddUserData = await ApiRequest.AddNewUser(reqDataUser);

        if (!reqAddUserData.status) return;
        await getAllUsers();
    }



    private async Task CheckValue()
    {
        var email = reqDataUser.Email;

        if (reqDataUser.Role == "admin")
        {
            NavigationManager.NavigateTo("/counter");
        }

        if (string.IsNullOrWhiteSpace(email))
        {
            message = "Глаза разуй ты не ввёл email!";
            return;
        }

        var userExists = users.Any(u => u.Email.Equals(email, StringComparison.OrdinalIgnoreCase));

        if (userExists)
        {
            message = $"Ну что тебе повезло email: '{email}' уже существует!";
            if (reqDataUser.Role == "admin")
            {
                // ShowCounterPage();
                NavigationManager.NavigateTo("/counter");
            }
            else
            {
                // HideCounterPage();/fetchdata
                NavigationManager.NavigateTo("/counter");
            }
        }
        else
        {
            AddNewUser();
            message = $"Поздравляю твой аккаунт на этот email: '{email}' был только что создан!";
            if (reqDataUser.Role == "admin")
            {
                // ShowCounterPage();
                NavigationManager.NavigateTo("/counter");
            }
            else
            {
                // HideCounterPage();
                NavigationManager.NavigateTo("/counter");
            }



        }


    }



   

    private async Task DeleteUser(int id)
    {
        try
        {

            var userEx = users.FirstOrDefault(u => u.id_Email == id);
            
            ShowAlert($"Пользователь с email- {userEx.Email} был успешно удалён!");
            var response = await Http.DeleteAsync($"api/UsersLogins/{id}");
            if (response.IsSuccessStatusCode)
            {
                await getAllUsers();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowAlert($"Ошибка удаления пользователя: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"Ошибка: {ex.Message}");
        }
    }


    private void ShowAlert(string message)
    {
        JS.InvokeVoidAsync("alert", message);
    }



}
