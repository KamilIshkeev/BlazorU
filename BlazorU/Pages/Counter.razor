@page "/counter"
@using BlazorU.ApiRequest
@using BlazorU.ApiRequest.Model
@inject HttpClient Http
@* @inject PageVisibilityService PageVisibilityService *@
@using BlazorU.Pages
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<PageTitle>Users list</PageTitle>


<h1>Авторизация/Регистрация</h1>
<p>@message</p>
@* <button @onclick="HideCounterPage">Hide Counter Page</button> *@

<div class="d-flex align-items-center h-custom-2 px-5 ms-xl-4 mt-5 pt-5 pt-xl-0 mt-xl-n5">
    <form style="width: 23rem;">
        <div class="form-outline mb-4">
            <label class="form-label" for="form2Example28">Email</label>
            <input type="password" @bind="@reqDataUser.Email" id="form2Example28" class="form-control form-control-lg" />
        </div>
        <div class="form-outline mb-4">
            <label class="form-label" for="form2Example28">Password</label>
            <input type="password" @bind="@reqDataUser.Password" id="form2Example28" class="form-control form-control-lg" />
        </div>
        <div class="form-outline mb-4">
            <label class="form-label" for="form2Example28">Name</label>
            <input type="password" @bind="@reqDataUser.Name" id="form2Example28" class="form-control form-control-lg" />
        </div>
        <div class="form-outline mb-4">
            <label class="form-label" for="form2Example28">Description</label>
            <input type="password" @bind="@reqDataUser.Descrioption" id="form2Example28" class="form-control form-control-lg" />
        </div>
        <div class="pt-1 mb-4">
            <button class="btn btn-info btn-lg btn-block" @onclick="CheckValue" type="button">Войти</button>
        </div>
    </form>
</div>

@code {
    private string message = string.Empty;
    private List<UserDataShort> users;
    private ReqDataUser reqDataUser = new ReqDataUser();

    public static ReqDataUser chak { get; set; }
    [Inject] private ApiRequestService ApiRequest { get; set; }





    protected override async Task OnInitializedAsync()
    {
        await getAllUsers();
    }

    private async Task getAllUsers()
    {
        var userData = await ApiRequest.GetAllUsersAsync();
        users = userData?.data?.users ?? new List<UserDataShort>();

        StateHasChanged();
    }


    private async void AddNewUser()
    {
        var reqAddUserData = await ApiRequest.AddNewUser(reqDataUser);

        if (!reqAddUserData.status) return;
        await getAllUsers();
    }




    private async Task CheckValue()
    {
        var email = reqDataUser.Email;
        var pasw = reqDataUser.Password;




        if (string.IsNullOrWhiteSpace(email))
        {
            ShowAlert("Глаза разуй ты не ввёл email!");
            return;
        }
        if (string.IsNullOrWhiteSpace(pasw))
        {
            ShowAlert("А пароль кто введёт?");
            return;
        }

        var userExists = users.Any(u => u.Email.Equals(email, StringComparison.OrdinalIgnoreCase));
        
        if (userExists == true)
        {
            var userRol = users.FirstOrDefault(u => u.Email == email);
            var rol = userRol.Role;
            message = $"Ну что тебе повезло email: '{email}' уже существует!";

            if (rol == "admin")
            {
                ShowAlert("Вход в админ панель");
                
                NavigationManager.NavigateTo("/admpanel");
            }
            else
            {
                ShowAlert("Хорошего вам настроения! Вход в кабинет");
                
                NavigationManager.NavigateTo("/fetchdata");
            }
        }
        else 
        {

            message = $"Поздравляю твой аккаунт на этот email: '{email}' был только что создан!";
            AddNewUser();
            ShowAlert("Хорошего вам настроения! Вход в кабинет");
                
            NavigationManager.NavigateTo("/fetchdata");

        }


    }

    private void ShowAlert(string message)
    {
        JS.InvokeVoidAsync("alert", message);
    }

}


    



