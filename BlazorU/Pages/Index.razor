@* @page "/"
@using BlazorU.ApiRequest
@using BlazorU.ApiRequest.Model
@inject NavigationManager NavigationManager;
@inject HttpClient Http


<PageTitle>Index</PageTitle>

<h1>Авторизация</h1>
<p>@message</p>

<div class="d-flex align-items-center h-custom-2 px-5 ms-xl-4 mt-5 pt-5 pt-xl-0 mt-xl-n5">
    <form style="width: 23rem;">
        <div class="form-outline mb-4">
            <label class="form-label" for="form2Example28">Email</label>
            <input type="password" @bind="@reqDataUser.Email" id="form2Example28" class="form-control form-control-lg" />
        </div>
        <div class="form-outline mb-4">
            <label class="form-label" for="form2Example28">Password</label>
            <input type="password" @bind="@reqDataUser.Password" id="form2Example28" class="form-control form-control-lg" />
        </div>
        <div class="form-outline mb-4">
            <label class="form-label" for="form2Example28">Name</label>
            <input type="password" @bind="@reqDataUser.Name" id="form2Example28" class="form-control form-control-lg" />
        </div>
        <div class="form-outline mb-4">
            <label class="form-label" for="form2Example28">Description</label>
            <input type="password" @bind="@reqDataUser.Description" id="form2Example28" class="form-control form-control-lg" />
        </div>
        <div class="pt-1 mb-4">
            <button class="btn btn-info btn-lg btn-block" @onclick="NavURL1" type="button">Войти</button>
        </div>
    </form>
</div>


@code{
    private string message = string.Empty;
    private List<UserDataShort> users;
    private ReqDataUser reqDataUser = new ReqDataUser();

    [Inject] private ApiRequestService ApiRequest { get; set; }




    protected override async Task OnInitializedAsync()
    {
        await getAllUsers();
    }

    private async Task getAllUsers()
    {
        var userData = await ApiRequest.GetAllUsersAsync();
        users = userData?.data?.users ?? new List<UserDataShort>();

        StateHasChanged();
    }


    private async void AddNewUser()
    {
        var reqAddUserData = await ApiRequest.AddNewUser(reqDataUser);

        if (!reqAddUserData.status) return;
        await getAllUsers();
    }


    private void NavURL1()
    {
        NavigationManager.NavigateTo("/counter");
    }


    private void CheckValue()
    {
        var Email = reqDataUser.Email;

        if (string.IsNullOrWhiteSpace(reqDataUser.Email))
        {
            message = "Please enter a value.";
            return;
        }

        // Проверяем, содержится ли введенное значение в списке
        if (users.Contains(Email, StringComparer.OrdinalIgnoreCase))
        {
            message = $"Value '{Email}' exists in the list!";
            // Перенаправляем на страницу FetchData
            NavigationManager.NavigateTo("/fetchdata");
        }
        else
        {
            AddNewUser();
            message = $"Value '{Email}' does not exist in the list.";
            // Перенаправляем на страницу Counter
            NavigationManager.NavigateTo("/counter");
        }
    }



}


<SurveyPrompt Title="How is Blazor working for you?" />
 *@






 @page "/"
@using BlazorU.ApiRequest
@using BlazorU.ApiRequest.Model
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Index</PageTitle>

<h1>Авторизация</h1>
<p>@message</p>

<div class="d-flex align-items-center h-custom-2 px-5 ms-xl-4 mt-5 pt-5 pt-xl-0 mt-xl-n5">
    <form style="width: 23rem;">
        <div class="form-outline mb-4">
            <label class="form-label" for="form2Example28">Email</label>
            <input type="password" @bind="@reqDataUser.Email" id="form2Example28" class="form-control form-control-lg" />
        </div>
        <div class="form-outline mb-4">
            <label class="form-label" for="form2Example28">Password</label>
            <input type="password" @bind="@reqDataUser.Password" id="form2Example28" class="form-control form-control-lg" />
        </div>
        <div class="form-outline mb-4">
            <label class="form-label" for="form2Example28">Name</label>
            <input type="password" @bind="@reqDataUser.Name" id="form2Example28" class="form-control form-control-lg" />
        </div>
        <div class="form-outline mb-4">
            <label class="form-label" for="form2Example28">Description</label>
            <input type="password" @bind="@reqDataUser.Description" id="form2Example28" class="form-control form-control-lg" />
        </div>
        <div class="pt-1 mb-4">
            <button class="btn btn-info btn-lg btn-block" @onclick="CheckValue" type="button">Войти</button>
        </div>
    </form>
</div>

@code {
    private string message = string.Empty;
    private List<UserDataShort> users;
    private ReqDataUser reqDataUser = new ReqDataUser();

    [Inject] private ApiRequestService ApiRequest { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await getAllUsers();
    }

    private async Task getAllUsers()
    {
        var userData = await ApiRequest.GetAllUsersAsync();
        users = userData?.data?.users ?? new List<UserDataShort>();
        StateHasChanged();
    }

    private async Task AddNewUser()
    {
        var reqAddUserData = await ApiRequest.AddNewUser(reqDataUser);

        if (!reqAddUserData.status) return;
        await getAllUsers();
    }

    private async Task NavURL1()
    {
        await CheckValue();
    }

    private async Task CheckValue()
    {
        var email = reqDataUser.Email;

        if (string.IsNullOrWhiteSpace(email))
        {
            message = "Глаза разуй ты не ввёл email!";
            return;
        }

        var userExists = users.Any(u => u.Email.Equals(email, StringComparison.OrdinalIgnoreCase));

        if (userExists)
        {
            message = $"Ну что тебе повезло email: '{email}' уже существует!";
            NavigationManager.NavigateTo("/fetchdata");
        }
        else
        {
            await AddNewUser();
            message = $"Поздравляю твой аккаунт на этот email: '{email}' был только что создан!";
            NavigationManager.NavigateTo("/counter");
        }
    }
}

<SurveyPrompt Title="How is Blazor working for you?" />